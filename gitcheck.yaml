# Sample GitCheck configuration
# This file defines the quality assessment pipeline for a shell script repository

# Preflight commands run before quality checks to set up the environment
# Add commands here to:
# - Check if required tools are installed
# - Set up virtual environments
# - Install dependencies
# - Configure the testing environment
preflight:
  - name: "shellcheck"
    command: "which shellcheck || (echo 'ShellCheck not found. Install with: brew install shellcheck' && exit 1)"
  
  - name: "bats"
    command: "which bats || (echo 'BATS not found. Install with `brew install bats-core`' && exit 1)"
  
  - name: "claude"
    command: "which claude || (echo 'claude not found. Install from https://claude.ai/download' && exit 1)"

# Quality assessment commands that generate artefact files
# Add commands here to:
# - Run linters and static analysis tools
# - Execute tests and generate coverage reports
# - Perform security scans
# - Calculate code complexity metrics
# - Generate any other quality metrics
checks:
  - name: "lint"
    command: "shellcheck gitcheck --shell=bash --severity=style"
  
  - name: "tests"
    command: "bats tests/"
  
  - name: "security"
    command: "shellcheck gitcheck --severity=warning"
  
  - name: "coverage"
    command: >
      claude --dangerously-skip-permissions -p 'Generate a coverage report for the gitcheck script.  
      The test results are at @.gitcheck/tests
      The tests are in the @tests/ directory.
      The code being tested is in the @gitcheck script.
      Do not alter any files.
      Do not create any files.
      Do this noninteractively, without any chatter, until you output your final report.
      The report should include the following sections:
      - Total lines of code
      - Total lines of test code
      - Total lines of code covered by tests
      - Total lines of code not covered by tests
      - Percentage of code covered by tests
      - Percentage of code not covered by tests'

# Metrics commands that generate structured data for analysis
# Add commands here to:
# - Calculate code complexity metrics
# - Measure test coverage percentages
# - Count lines of code by type
# - Generate performance benchmarks
# - Create any other quantifiable metrics
metrics:
  - name: "code_complexity"
    command: "echo '5'"
    allowed_values: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
  
  - name: "test_coverage"
    command: "echo '85'"
    allowed_values: ["0", "10", "20", "30", "40", "50", "60", "70", "80", "90", "100"]
  
  - name: "lines_of_code"
    command: "wc -l gitcheck | awk '{print $1}'"
    allowed_values: ["0-100", "101-500", "501-1000", "1001+"] 
# Sample GitCheck configuration
# This file defines the quality assessment pipeline for a shell script repository

# Preflight commands run before quality checks to set up the environment
# Add commands here to:
# - Check if required tools are installed
# - Set up virtual environments
# - Install dependencies
# - Configure the testing environment
preflight:
  - name: "shellcheck"
    command: "which shellcheck || (echo 'ShellCheck not found. Install with: brew install shellcheck' && exit 1)"
  
  - name: "bats"
    command: "which bats || (echo 'BATS not found. Install with `brew install bats-core`' && exit 1)"
  
  - name: "claude"
    command: "which claude || (echo 'claude not found. Install from https://claude.ai/download' && exit 1)"

# Quality assessment commands that generate artefact files
# Add commands here to:
# - Run linters and static analysis tools
# - Execute tests and generate coverage reports
# - Perform security scans
# - Calculate code complexity metrics
# - Generate any other quality metrics
checks:
  - name: "lint"
    command: "shellcheck gitcheck --shell=bash --severity=style"
  
  - name: "tests"
    command: "bats tests/"
  
  - name: "security"
    command: "shellcheck gitcheck --severity=warning"
  
  - name: "readme_assessment"
    command: "claude --dangerously-skip-permissions -p \"$(cat .gitcheck/prompts/readme_assessment_prompt.md)\""

  - name: "coverage"
    command: "claude --dangerously-skip-permissions -p \"$(cat .gitcheck/prompts/coverage_prompt.md)\""

  - name: "dummy"
    command: "echo yes"


# Metrics commands that generate structured data for analysis
# Add commands here to:
# - Calculate code complexity metrics
# - Measure test coverage percentages
# - Count lines of code by type
# - Generate performance benchmarks
# - Create any other quantifiable metrics
metrics:
  - name: "code_complexity"
    command: "echo '5'"
    data_type: "number"
    allowed_values: ["1-10"]
    default: "1"
  
  - name: "test_coverage"
    command: "echo '85'"
    data_type: "number"
    allowed_values: ["0-100"]
    default: "0"
  
  - name: "lines_of_code"
    command: "wc -l gitcheck | awk '{print $1}'"
    data_type: "number"
    allowed_values: ["0-100", "101-500", "501-1000", "1001+"]
    default: "0"
  
  - name: "code_quality_score"
    command: "echo '1.5'"
    data_type: "number"
    allowed_values: ["0-1"]
    default: "0"
  
  - name: "build_status"
    command: "echo 'success'"
    data_type: "string"
    allowed_values: ["success", "warning", "failure"]
    default: "failure"
  
  # Documentation Quality Metrics
  - name: "has_project_purpose"
    command: "head -10 README.md | grep -q '^## Purpose$' && echo 'true' || echo 'false'"
    data_type: "string"
    allowed_values: ["true", "false"]
    default: "false"
    
  - name: "has_quick_start"
    command: "grep -q '^## Quick Start$' README.md && echo 'true' || echo 'false'"
    data_type: "string"
    allowed_values: ["true", "false"]
    default: "false"
  
  - name: "quick_start_works"
    command: "head -1 .gitcheck/readme_assessment"
    data_type: "string"
    allowed_values: ["NONE", "NOT_WORKING", "WORKING"]
    default: "NONE"
    
  - name: "functionality_purpose_alignment"
    command: "head -2 .gitcheck/readme_assessment | tail -1"
    data_type: "string"
    allowed_values: ["PERFECT", "STRONG", "GOOD", "MODERATE", "WEAK", "POOR", "NONE"]
    default: "NONE"

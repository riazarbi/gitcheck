# Simple GitCheck configuration - Taskfile-like format
# This eliminates complex quote escaping and makes generation simple

preflight:
  shellcheck:
    cmd: which shellcheck || (echo 'ShellCheck not found. Install with brew install shellcheck' && exit 1)
  
  bats:
    cmd: which bats || (echo 'BATS not found. Install with brew install bats-core' && exit 1)
  
  claude:
    cmd: which claude || (echo 'claude not found. Install from https://claude.ai/download' && exit 1)

checks:
  lint:
    cmd: shellcheck gitcheck --shell=bash --severity=style
  
  tests:
    cmd: bats tests/
  
  security:
    cmd: shellcheck gitcheck --severity=warning
  
  error_handling_check:
    cmd: grep -n "set -e" gitcheck || echo "No strict error handling found"
  
  eval_usage_check:
    cmd: grep -n "eval" gitcheck || echo "No eval usage found (good)"
  
  exec_usage_check:
    cmd: grep -n "exec" gitcheck || echo "No exec usage found"

  portability_check:
    cmd: grep -n -E "(^[[:space:]]*#!.*/|/usr/bin|/bin/|/opt/|/var/|/etc/|/home/|/tmp/|/dev/|/proc/|/sys/)" gitcheck | head -5 || echo "No hardcoded paths found"

metrics:
  build_status:
    cmd: echo "success"
    data_type: string
    allowed_values: ["success", "warning", "failure"]
    default: "failure"

  test_coverage:
    cmd: echo "85"
    data_type: number
    allowed_values: ["0-100"]
    default: "0"

  code_complexity:
    cmd: echo "5"
    data_type: number
    allowed_values: ["1-10"]
    default: "1"

  lines_of_code:
    cmd: wc -l gitcheck | awk '{print $1}'
    data_type: number
    allowed_values: ["0-100", "101-500", "501-1000", "1001+"]
    default: "0"

  has_project_purpose:
    cmd: head -10 README.md | grep -q "^## Purpose$" && echo true || echo false
    data_type: string
    allowed_values: ["true", "false"]
    default: "false"

  has_quick_start:
    cmd: grep -q "^## Quick Start$" README.md && echo true || echo false
    data_type: string
    allowed_values: ["true", "false"]
    default: "false"

  quick_start_works:
    cmd: head -1 .gitcheck/comprehensive_assessment
    data_type: string
    allowed_values: ["NONE", "NOT_WORKING", "WORKING"]
    default: "NONE"

  functionality_purpose_alignment:
    cmd: head -2 .gitcheck/comprehensive_assessment | tail -1
    data_type: string
    allowed_values: ["PERFECT", "STRONG", "GOOD", "MODERATE", "WEAK", "POOR", "NONE"]
    default: "NONE"

  error_handling_score:
    cmd: grep -c "set -e" gitcheck
    data_type: number
    allowed_values: ["0", "1"]
    default: "0"

  dangerous_commands:
    cmd: grep -c "eval\\|exec" gitcheck
    data_type: number
    allowed_values: ["0", "1", "2+"]
    default: "0"

  portability_score:
    cmd: grep -c -E "(^[[:space:]]*#!.*/|/usr/bin|/bin/|/opt/|/var/|/etc/|/home/|/tmp/|/dev/|/proc/|/sys/)" gitcheck
    data_type: number
    allowed_values: ["0", "1-3", "4-10", "11+"]
    default: "0"

  code_review_score:
    cmd: head -3 .gitcheck/comprehensive_assessment | tail -1
    data_type: string
    allowed_values: ["EXCELLENT", "GOOD", "FAIR", "POOR", "BAD"]
    default: "FAIR"
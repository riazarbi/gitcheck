#!/bin/bash

# Check for required system dependencies
if ! command -v yq >/dev/null 2>&1; then
    echo "Error: yq is required but not installed." >&2
    echo "Install from: https://github.com/mikefarah/yq#install" >&2
    exit 1
fi
if ! command -v git >/dev/null 2>&1; then
    echo "Error: git is required but not installed." >&2
    echo "Install from: https://git-scm.com/downloads" >&2
    exit 1
fi
if ! command -v jq >/dev/null 2>&1; then
    echo "Error: jq is required but not installed." >&2
    echo "Install from: https://stedolan.github.io/jq/download/" >&2
    exit 1
fi
if ! command -v bc >/dev/null 2>&1; then
    echo "Error: bc is required but not installed." >&2
    echo "Install from: https://www.gnu.org/software/bc/" >&2
    exit 1
fi
if ! command -v task >/dev/null 2>&1; then
    echo "Error: task is required but not installed." >&2
    echo "Install from: https://taskfile.dev/installation/" >&2
    exit 1
fi

# GitCheck - Quality assessment tool for code repositories using Task

set -euo pipefail

# Default values
CONFIG_FILE="gitcheck.yaml"
COMMIT_HASH=""
ONLY_PHASE=""
VERBOSE=false
DEFAULT_TIMEOUT=300
TIMEOUT=$DEFAULT_TIMEOUT

usage() {
    cat << EOF
Usage: gitcheck [options]

Options:
    --config|-c <file>     Path to gitcheck.yaml file (default: gitcheck.yaml)
    --commit|-C <hash>     Git commit hash to evaluate (default: latest commit)
    --only=PHASE          Run only the specified phase (validate, preflight, checks, metrics)
    --verbose             Print command output to terminal (default: only log to files)
    --timeout=N           Timeout in seconds for long-running commands (default: 300)
    --help|-h             Show this help message

Examples:
    gitcheck                                    # Use defaults
    gitcheck --config my-config.yaml           # Custom config file
    gitcheck --commit abc1234                  # Specific commit
    gitcheck --config my-config.yaml --commit HEAD --only=checks  # Custom config, HEAD, checks only
    gitcheck --verbose                         # Print output to terminal
    gitcheck --timeout=600                     # Custom timeout (10 minutes)
EOF
    exit 1
}

# Process command line arguments
only_count=0
while [[ $# -gt 0 ]]; do
    case $1 in
        --config|-c)
            CONFIG_FILE="$2"
            shift 2
            ;;
        --commit|-C)
            COMMIT_HASH="$2"
            shift 2
            ;;
        --only=*)
            ((only_count++))
            if [[ $only_count -gt 1 ]]; then
                echo "Error: Only one --only flag can be specified. You can run one phase at a time."
                echo "Valid phases: validate, preflight, checks, metrics"
                exit 1
            fi
            ONLY_PHASE="${1#--only=}"
            shift
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --timeout=*)
            TIMEOUT="${1#--timeout=}"
            if ! [[ "$TIMEOUT" =~ ^[0-9]+$ ]] || [[ "$TIMEOUT" -eq 0 ]]; then
                echo "Error: Timeout must be a positive integer"
                exit 1
            fi
            shift
            ;;
        --help|-h)
            usage
            ;;
        -*) 
            echo "Unknown option: $1"
            usage
            ;;
        *)
            echo "Unknown positional argument: $1"
            usage
            ;;
    esac
done

# Validate phase
if [[ -n "$ONLY_PHASE" ]]; then
    case "$ONLY_PHASE" in
        validate|preflight|checks|metrics) ;;
        *) echo "Error: Invalid phase '$ONLY_PHASE'"; exit 1 ;;
    esac
fi

# Resolve commit hash
if [[ -z "$COMMIT_HASH" ]]; then
    COMMIT_HASH=$(git rev-parse HEAD)
fi
if [[ "$COMMIT_HASH" == "HEAD" ]]; then
    COMMIT_HASH=$(git rev-parse HEAD)
fi
if ! git cat-file -e "$COMMIT_HASH^{commit}" 2>/dev/null; then
    echo "Error: Commit hash '$COMMIT_HASH' does not exist or is not a commit."
    exit 1
fi

echo "GitCheck Configuration:"
echo "  Config file: $CONFIG_FILE"
echo "  Commit hash: $COMMIT_HASH"
echo "  Only phase: $ONLY_PHASE"
echo "  Verbose: $VERBOSE"
echo "  Timeout: ${TIMEOUT}s"
echo ""

# Validate YAML exists and is valid
if ! yq eval '.' "$CONFIG_FILE" >/dev/null 2>&1; then
    echo "Error: '$CONFIG_FILE' is not a valid YAML file"
    exit 1
fi

echo "Validating YAML configuration..."
echo "âœ… YAML configuration validation passed"
echo ""

# Create artefact directory
mkdir -p .gitcheck

echo "GitCheck completed!"